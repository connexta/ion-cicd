# This configuration yml file should be renamed to "config.yml" to use
# -> Build Engine: Maven
# -> Security Tools: Snyk
# -> Code Quality: SonarCloud
# -> Build Artifacts: binaries
#
#
# CICD Configuration Version: 0.3
#
# Expected external configurations (Environment variables)
# - PIPELINE_SONAR_TOKEN: The authentication token required by SonarCloud to upload reports
# - SNYK_TOKEN: The authentication token required by Snyk to upload reports and execute certain scans
# - RELEASE: Boolean indicating whether there should be a release for this commit
# - RELEASE_TAG: The release tag for this version (only relevant if RELEASE = true)
# - RELEASE_VERSION: The version to release (only relevant if RELEASE = true)
# - NEXT_VERSION: The next development version (only relevant if RELEASE = true)
# - GPG_PASSPHRASE: The GPG phrase for signing the released artifacts (only relevant if RELEASE = true)

version: 2.1 # CircleCI API version

# This use of this orb requires 3rd party orbs to be enable for the organization
orbs:
  snyk: snyk/snyk@0.0.8

jobs:
# Execute compilation and library linkage as first step
  Build:
    docker: &image # The '&image' setups up a reference tag to be used by '*image' (see unit tests)
      - image: circleci/openjdk:11-jdk
    steps:
      - run: &env # does the same as '&image' above and see usage below in unit tests
          name: Setting environment
          # DISABLE_DOWNLOAD_PROGRESS_OPTS - this variable simplifies the overall logging output from maven by restricting to warn level
          command: |
            echo "export DISABLE_DOWNLOAD_PROGRESS_OPTS=-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn" >> $BASH_ENV
            source $BASH_ENV
      - checkout # Built in GitHub repo checkout
      - run:
          name: Maven install without tests
          command: |
            mvn install -B -DskipTests $DISABLE_DOWNLOAD_PROGRESS_OPTS
# Execute unit tests separate from other executions to track performance
  Unit Testing:
    docker: *image
    steps:
      - run: *env
      - checkout
      - run:
          name: Maven test phase
          command: |
            mvn test -B $DISABLE_DOWNLOAD_PROGRESS_OPTS
      - run:
          name: Move results
          # Create a results directory that CircleCI will scan, and move XML created by the Surefire plugin into it
          # Can make additional directories for other flavors of test results (refer to CircleCI doc 'Collecting Test Metadata')
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      # Set results directory to our newly created dir
      - store_test_results:
          path: ~/test-results
      # Specify subdirectory for junit results (can add other flavors)
      - store_artifacts:
          path: ~/test-results/junit
# Security-Dependency Scanning
  Dependency Scan:
    docker: *image
    steps:
      - checkout
      - snyk/scan:
          fail-on-issues: true # Fail if we discover any issues/vulnerabilities
          monitor-on-build: false
          severity-threshold: high # Set the failure threshold to high
          token-variable: SNYK_TOKEN #This Token is an environment variable -- API Token from Snyk
# Quality-Code Scanning -- Call out what flavor (Sonar presently) and indicate Code Quality Scan
  Sonar Code Quality Scan:
    docker: *image
    steps:
    # PR Analysis cannot have branch.target parameter
    # PR Analysis requires "pullrequest.provider" & "pullrequest.github.reposotiry" to fire decorators back to GitHub
    # CircleCI limit:  no organization name for easier pointing to github.repository value
      - run:
          name: Determining Sonar and Branch Configuration
          command: |
              SONAR_PARAMS='';
              if [[ ! -z $CIRCLE_PULL_REQUEST ]];
              then
                SONAR_PARAMS="${SONAR_PARAMS} \
                -Dsonar.pullrequest.key=${CIRCLE_PULL_REQUEST##*/} \
                -Dsonar.pullrequest.base=master \
                -Dsonar.pullrequest.branch=${CIRCLE_BRANCH} \
                -Dsonar.pullrequest.provider=GitHub
                -Dsonar.pullrequest.github.repository=connexta/${CIRCLE_PROJECT_REPONAME}"
              fi
              if [[ ${CIRCLE_BRANCH} != 'master' && -z $CIRCLE_PULL_REQUEST ]];
              then
                SONAR_PARAMS="${SONAR_PARAMS} \
                -Dsonar.branch.target=master \
                -Dsonar.branch.name=${CIRCLE_BRANCH}"
              fi
              echo "export SONAR_PARAMS='${SONAR_PARAMS}'" >> $BASH_ENV
              source $BASH_ENV
      - checkout
        # sonar.pullrequest.base should be your default branch but may not be "master"
        # sonar.login is the API token we can use and here is configured for a CircleCI Env Variable
        # sonar.organization "cx" is the Connexta Organization
        # CircleCI Env. Variable CIRCLE_PULL_REQUEST only works for "forked" repos
      - run:
          name: Scanning
          command: |
            echo $SONAR_PARAMS;
            mvn verify sonar:sonar \
            -Dsonar.projectKey=${CIRCLE_PROJECT_REPONAME} \
            -Dsonar.organization=cx \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${PIPELINE_SONAR_TOKEN} \
            $SONAR_PARAMS;

# START: UNDER CONSTRUCTION AREA ---------------------------------------
  Contract Testing: # Testing-Contract
    docker:
      - image: circleci/ruby:2.4.1
    steps:
      - run: echo "*PLACEHOLDER* pretending to execute contract testing phase!"
  Integration Testing: # Testing-Integration
    docker:
      - image: circleci/ruby:2.4.1
    steps:
      - run: echo "*PLACEHOLDER* pretending to execute integration testing phase!"
# END: UNDER CONSTRUCTION AREA ---------------------------------------

# Prepares a release and tag from current commit
  Tag Release:
    docker: *image
    steps:
      # Tag Release uses the Maven Deploy plugin to create a git tag with given name and push it to the repo
      # Note: This will require a deploy key be set up in CircleCI Settings -> Checkout SSH Keys
      # Also be sure to reference the environment variables section for configuration information
      - checkout
      - run:
          name: Tag Release
          command: |
            if [ $RELEASE = true ]
            then
              git config --global user.email "circleci@circleci.com"
              git config --global user.name "CircleCI"
              mvn -B -Dtag=${RELEASE_TAG} -DreleaseVersion=${RELEASE_VERSION} -DdevelopmentVersion=${NEXT_VERSION} -Darguments=-Dgpg.passphrase=${GPG_PASSPHRASE} -DscmCommentPrefix="[skip ci]" release:prepare
            fi

# Deploy artifacts to location specified in the poms distributionManagement tag
  Deploy Artifacts:
    docker: *image
    steps:
      # Deploy Artifacts uses the Maven Deploy plugin and it's configuration from the pom.xml to deploy an artifact
      # Note: This will require a deploy key be set up in CircleCI Settings -> Checkout SSH Keys
      # Also be sure to reference the environment variables section for configuration information
      - run: *env
      - checkout
      - run:
          name: Deploy Artifacts
          command: |
            if [ $RELEASE = true ]
            then
              mvn javadoc:aggregate -B -DskipTests -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS
              mvn deploy -B -DskipTests -DretryFailedDeploymentCount=10 -nsu $DISABLE_DOWNLOAD_PROGRESS_OPTS
            fi

# There should be a minimum of 2 control flows:
# 1) a feature branch/PR centric flow for vetting through the CICD pipeline incremental changes
# 2) a master/release centric flow for vetting the overall changes headed out for public release
workflows:
  version: 2.1
# Defines a workflow for a repo that only produces an non-container artifact
  Ion Artifact Pipeline:
    jobs: # List what specific defined jobs from above are to be run
# Job 1a
      - Build
# Job1b - Intentionally is a dead end as it shouldn't break the build
      - Sonar Code Quality Scan 
# Job 2a
      - Unit Testing:
          requires:
            - Build
          filters:
            branches:
              ignore: master
# Job 2b - Expected that Dependency Scan is faster than Testing Phase
      - Dependency Scan:
          requires:
            - Build
# Job 3a
      - Contract Testing:
          requires:
            - Dependency Scan
            - Unit Testing
          filters:
            branches:
              only: master
#Job 3b
      - Integration Testing:
          requires:
            - Dependency Scan
            - Unit Testing
          filters:
            branches:
              only: master
# Job 4a
      - Tag Release:
          requires:
            - Contract Testing
            - Integration Testing
          filters:
            branches:
              only: master
# Job 4b
      - Deploy Artifacts:
          requires:
            - Tag Release
          filters:
            branches:
              only: master