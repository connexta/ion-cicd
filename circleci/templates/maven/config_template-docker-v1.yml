# This configuration yml file should be renamed to "config.yml" to use
# -> Build Engine: Maven
# -> Security Tools: Snyk
# -> Code Quality: SonarCloud
# -> Build Artifacts: binaries + container
#
#
# CICD Configuration Version: 0.2
#
# Expected external configurations (Environment variables)
# - PIPELINE_SONAR_TOKEN: The authentication token required by SonarCloud to upload reports
# - SNYK_TOKEN: The authentication token required by Snyk to upload reports and execute certain scans

version: 2.1 # CircleCI API version

# This use of this orb requires 3rd party orbs to be enable for the organization
orbs:
  snyk: snyk/snyk@0.0.8

jobs:
# Execute compilation and library linkage as first step
  Build:
    docker: &image # The '&image' setups up a reference tag to be used by '*image' (see unit tests)
      - image: circleci/openjdk:11-jdk
    steps:
      - run: &env # does the same as '&image' above and see usage below in unit tests
          name: Setting environment
          # DISABLE_DOWNLOAD_PROGRESS_OPTS - this variable simplifies the overall logging output from maven by restricting to warn level
          command: |
            echo "export DISABLE_DOWNLOAD_PROGRESS_OPTS=-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn" >> $BASH_ENV
            source $BASH_ENV
      - checkout #built in GitHub repo checkout
      - run:
          name: Maven install without tests
          command: |
            mvn install -B -DskipTests $DISABLE_DOWNLOAD_PROGRESS_OPTS
# Execute unit tests separate from other executions to track performance
  Unit Testing:
    docker: *image
    steps:
      - run: *env
      - checkout
      - run:
          name: Maven test phase
          command: |
            mvn test -B $DISABLE_DOWNLOAD_PROGRESS_OPTS
# Security-Dependency Scanning
  Dependency Scan:
    docker: *image
    steps:
      - checkout
      - snyk/scan:
          fail-on-issues: true # Fail if we discover any issues/vulnerabilities
          monitor-on-build: false
          severity-threshold: high # Set the failure threshold to high
          token-variable: SNYK_TOKEN #This Token is an environment variable -- API Token from Snyk
# Quality-Code Scanning -- Call out what flavor (Sonar presently) and indicate Code Quality Scan
  Sonar Code Quality Scan:
    docker: *image
    steps:
    # PR Analysis cannot have branch.target parameter
    # PR Analysis requires "pullrequest.provider" & "pullrequest.github.reposotiry" to fire decorators back to GitHub
    # CircleCI limit:  no organization name for easier pointing to github.repository value
      - run:
          name: Determining Sonar and Branch Configuration
          command: |
              SONAR_PARAMS='';
              if [[ ! -z $CIRCLE_PULL_REQUEST ]];
              then
                SONAR_PARAMS="${SONAR_PARAMS} \
                -Dsonar.pullrequest.key=${CIRCLE_PULL_REQUEST##*/} \
                -Dsonar.pullrequest.base=master \
                -Dsonar.pullrequest.branch=${CIRCLE_BRANCH} \
                -Dsonar.pullrequest.provider=GitHub
                -Dsonar.pullrequest.github.repository=connexta/${CIRCLE_PROJECT_REPONAME}"
              fi
              if [[ ${CIRCLE_BRANCH} != 'master' && -z $CIRCLE_PULL_REQUEST ]];
              then
                SONAR_PARAMS="${SONAR_PARAMS} \
                -Dsonar.branch.target=master \
                -Dsonar.branch.name=${CIRCLE_BRANCH}"
              fi
              echo "export SONAR_PARAMS='${SONAR_PARAMS}'" >> $BASH_ENV
              source $BASH_ENV
      - checkout
        # sonar.pullrequest.base should be your default branch but may not be "master"
        # sonar.login is the API token we can use and here is configured for a CircleCI Env Variable
        # sonar.organization "cx" is the Connexta Organization
        # CircleCI Env. Variable CIRCLE_PULL_REQUEST only works for "forked" repos
      - run:
          name: Scanning
          command: |
            echo $SONAR_PARAMS;
            mvn verify sonar:sonar \
            -Dsonar.projectKey=${CIRCLE_PROJECT_REPONAME} \
            -Dsonar.organization=cx \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${PIPELINE_SONAR_TOKEN} \
            $SONAR_PARAMS;

# START: UNDER CONSTRUCTION AREA ---------------------------------------
# TODO #1 - Get the docker image to build and flush out stage and commenting
  Docker Image Build: # Build-Container Image
    docker:
      - image: circleci/ruby:2.4.1
    steps:
      - run: echo "*PLACEHOLDER* pretending to build a docker image!"
  Container Scan:
    docker:
      - image: circleci/ruby:2.4.1
    steps:
      - run: echo "*PLACEHOLDER* pretending to scan a docker image!"
  Contract Testing: # Testing-Contract
    docker:
      - image: circleci/ruby:2.4.1
    steps:
      - run: echo "*PLACEHOLDER* pretending to execute contract testing phase!"
  Integration Testing: # Testing-Integration
    docker:
      - image: circleci/ruby:2.4.1
    steps:
      - run: echo "*PLACEHOLDER* pretending to execute integration testing phase!"
  Deploy Docker Image:
    docker:
      - image: circleci/ruby:2.4.1
    steps:
      - run: echo "*PLACEHOLDER* pretending to deploy Docker Image to DockerHub!"
  Deploy Artifacts: # Deploy artifacts to Nexus or Maven Central
    docker:
      - image: circleci/ruby:2.4.1
    steps:
      - run: echo "*PLACEHOLDER* pretending to deploy build artifacts to Maven Central!"
# END: UNDER CONSTRUCTION AREA ---------------------------------------


# There should be a minimum of 2 control flows:
# 1) a feature branch/PR centric flow for vetting through the CICD pipeline incremental changes
# 2) a master/release centric flow for vetting the overall changes headed out for public release
workflows:
  version: 2.1
# Defines a workflow for a repo that produces a container artifact
  Ion Docker Pipeline:
    jobs: # List what specific defined jobs from above are to be run
#Job 1a
      - Build
#Job1b - Intentionally is a dead end as it shouldn't break the build
      - Sonar Code Quality Scan
#Job 2a
      - Unit Testing:
          requires:
            - Build
          filters:
            branches:
              ignore: master
#Job 2b
      - Dependency Scan:
          requires:
            - Build
#Job 3
      - Docker Image Build:
          requires:
            - Build
            - Unit Testing
            - Dependency Scan
# Job 4a - Expected that Dependency Scan is faster than Testing Phase
      - Container Scan:
          requires:
            - Docker Image Build
# Job 5a
      - Contract Testing:
          requires:
            - Container Scan
          filters:
            branches:
              only: master
#Job 5b
      - Integration Testing:
          requires:
            - Container Scan
          filters:
            branches:
              only: master
#Job 6a
      - Deploy Artifacts:
          requires:
            - Contract Testing
            - Integration Testing
          filters:
            branches:
              only: master
#Job 6b
      - Deploy Docker Image:
                requires:
            - Contract Testing
            - Integration Testing
          filters:
            branches:
              only: master